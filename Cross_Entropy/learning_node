#!/usr/bin/env python3


# ___________________________________________ Libraries and Definitions ___________________________________________ #


# ROS management
import rospy
import rospkg

# Useful for dictionaries and tuples
from collections import namedtuple

# MAVROS msgs to use setpoints
from geometry_msgs.msg import Point, PoseStamped
from mavros_msgs.msg import *

# MAVROS srv to change modes 
from mavros_msgs.srv import *

# Math functions
import numpy as np
from math import sin,cos,sqrt
import random

# Learning libraries
import gym
import torch
import torch.nn as nn
import torch.optim as optim
from tensorboardX import SummaryWriter

# Custom environment
import drone_env

# Episode definition
Episode = namedtuple('Episode', field_names=['reward', 'steps'])
EpisodeStep = namedtuple('EpisodeStep', field_names=['observation', 'action'])


# ___________________________________________________ Constants ___________________________________________________ #


# HARD CODING - PIPE AT PREDEFINED LOCATION
PIPE16_LOC = [1.73, -1.46, 1.86]

# Learning parameters
HIDDEN_SIZE = 64
BATCH_SIZE = 10
PERCENTILE = 70
LEARNING_RATE = 0.01

# Gym Environment parameters
ENV_NAME = "IndustrialDrone-v0"

# Global variable
steps = 0


# _____________________________________________ Classes ad Functions _____________________________________________ #


# Simple Neural Network we'll use at first
class Net(nn.Module):

    def __init__(self, obs_size, hidden_size, n_actions):
        super(Net, self).__init__()
        self.net = nn.Sequential(
            nn.Linear(obs_size, hidden_size),
            nn.ReLU(),
            nn.Linear(hidden_size, n_actions)
        )

    def forward(self, x):
        return self.net(x)
        

def iterate_batches(env, epsilon, net, batch_size):
    global steps
    batch = []
    episode_reward = 0.0
    episode_steps = []
    obs = env.reset()
    sm = nn.Softmax(dim=1)
    while True:
        obs_v = torch.FloatTensor([obs])
        act_probs_v = sm(net(obs_v))
        act_probs = act_probs_v.data.numpy()[0]
        best_action = np.random.choice(len(act_probs), p=act_probs)
        rand_action = np.random.choice(len(act_probs))
        action = np.random.choice([best_action, rand_action], p=[1-epsilon, epsilon])
        next_obs, reward, is_done, _ = env.step(action)
        steps += 1
        episode_reward += reward
        step = EpisodeStep(observation=obs, action=action)
        episode_steps.append(step)
        if is_done:
            print("\n________Total reward = ", episode_reward, "________\n")
            e = Episode(reward=episode_reward, steps=episode_steps)
            batch.append(e)
            episode_reward = 0.0
            episode_steps = []
            next_obs = env.reset()
            if len(batch) == batch_size:
                yield batch
                batch = []
        obs = next_obs


def filter_batch(batch, percentile):
    rewards = list(map(lambda s: s.reward, batch))
    reward_bound = np.percentile(rewards, percentile)
    reward_mean = float(np.mean(rewards))
    train_obs = []
    train_act = []
    for reward, steps in batch:
        if reward < reward_bound:
            continue
        train_obs.extend(map(lambda step: step.observation, steps))
        train_act.extend(map(lambda step: step.action, steps))
    train_obs_v = torch.FloatTensor(train_obs)
    train_act_v = torch.LongTensor(train_act)
    return train_obs_v, train_act_v, reward_bound, reward_mean


# _____________________________________________________ Main _____________________________________________________ #


# Main function
def main():

    # ROS node
    rospy.init_node('Learning_Node', anonymous=True)

    # Gym environment
    env = gym.make(ENV_NAME)
    obs_size = env.observation_space.shape[0]
    n_actions = env.action_space.n

    # Learning
    net = Net(obs_size, HIDDEN_SIZE, n_actions)
    objective = nn.CrossEntropyLoss()
    optimizer = optim.Adam(params=net.parameters(), lr=LEARNING_RATE)
    epsilon = 1.0

    # Debugger
    writer = SummaryWriter(log_dir='/home/gianfranco/Firmware/script/Cross_Entropy_FINAL/runs', comment="-cartpole")

    # ROS main loop
    while not rospy.is_shutdown():

        for iter_no, batch in enumerate(iterate_batches(
            env, epsilon, net, BATCH_SIZE)):
            obs_v, acts_v, reward_b, reward_m = \
                filter_batch(batch, PERCENTILE)
            optimizer.zero_grad()
            action_scores_v = net(obs_v)
            loss_v = objective(action_scores_v, acts_v)
            loss_v.backward()
            optimizer.step()
            print("%d [step %d]: loss=%.3f, reward_mean=%.1f, rw_bound=%.1f" % (
                iter_no, steps, loss_v.item(), reward_m, reward_b))
            writer.add_scalar("loss", loss_v.item(), steps)
            writer.add_scalar("reward_bound", reward_b, steps)
            writer.add_scalar("reward_mean", reward_m, steps)
            if reward_m > 100000:
                print("Solved in %f Batches [%d steps]!" % (iter_no, steps))
                break

    writer.close()
    #env.close()


if __name__ == '__main__':
	try:
		main()
	except rospy.ROSInterruptException:
		pass
